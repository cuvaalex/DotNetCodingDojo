// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ChristMasTreeSpec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("XMasTree")]
    public partial class XMasTreeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "XMasTree.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "XMasTree", "Write a program that draw a christmas tree", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Not Accepted Tree")]
        public virtual void NotAcceptedTree()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Not Accepted Tree", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have entered 2 into XMas Tree Software");
#line 8
 testRunner.When("I press Draw");
#line 9
 testRunner.Then("the result should be \"The tree should have a size at least of 3\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tree of 3 lines")]
        public virtual void TreeOf3Lines()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tree of 3 lines", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have entered 3 into XMas Tree Software");
#line 13
 testRunner.When("I press Draw");
#line hidden
#line 14
 testRunner.Then("the result on the screen should be :", "*\r\n* *\r\n* * *\r\n|_|", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tree of 4 lines")]
        public virtual void TreeOf4Lines()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tree of 4 lines", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have entered 4 into XMas Tree Software");
#line 24
 testRunner.When("I press Draw");
#line hidden
#line 25
 testRunner.Then("the result on the screen should be :", "*\r\n* *\r\n* * *\r\n* * * *\r\n|_|", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tree of 5 lines")]
        public virtual void TreeOf5Lines()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tree of 5 lines", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
 testRunner.Given("I have entered 5 into XMas Tree Software");
#line 35
 testRunner.When("I press Draw");
#line hidden
#line 36
 testRunner.Then("the result on the screen should be :", "*\r\n* *\r\n* * *\r\n* * * *\r\n* * *\r\n|_|", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tree of 6 lines")]
        public virtual void TreeOf6Lines()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tree of 6 lines", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("I have entered 6 into XMas Tree Software");
#line 47
 testRunner.When("I press Draw");
#line hidden
#line 48
 testRunner.Then("the result on the screen should be :", "*\r\n* *\r\n* * *\r\n* * * *\r\n* * *\r\n* * * *\r\n|_|", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Tree of 8 lines")]
        public virtual void TreeOf8Lines()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tree of 8 lines", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line 59
 testRunner.Given("I have entered 8 into XMas Tree Software");
#line 60
 testRunner.When("I press Draw");
#line hidden
#line 61
 testRunner.Then("the result on the screen should be :", "*\r\n* *\r\n* * *\r\n* * * *\r\n* * *\r\n* * * *\r\n* * * * *\r\n* * * * * *\r\n|__|", ((TechTalk.SpecFlow.Table)(null)));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
