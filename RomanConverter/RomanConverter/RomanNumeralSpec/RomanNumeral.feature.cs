// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RomanNumeralSpec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Roman Numeral")]
    public partial class RomanNumeralFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "RomanNumeral.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Roman Numeral", "A Roman numeral represents an integer using letters. Examples are XVII to represe" +
                    "nt 17, MCMLIII for 1953,\r\nand MMMCCCIII for 3303. By contrast, ordinary numbers " +
                    "such as 17 or 1953 are called Arabic numerals. \r\nThe following table shows the A" +
                    "rabic equivalent of all the single-letter Roman numerals:\r\n\r\n    M    1000      " +
                    "      X   10\r\n    D     500            V    5\r\n    C     100            I    1\r\n" +
                    "    L      50\r\n When letters are strung together, the values of the letters are " +
                    "just added up, with the following \r\n exception. When a letter of smaller value i" +
                    "s followed by a letter of larger value, the smaller value is \r\n subtracted from " +
                    "the larger value. For example, IV represents 5 - 1, or 4. And MCMXCV is interpre" +
                    "ted \r\n as M + CM + XC + V, or 1000 + (1000 - 100) + (100 - 10) + 5, which is 199" +
                    "5. In standard Roman numerals, \r\n no more than thee consecutive copies of the sa" +
                    "me letter are used. Following these rules, every number \r\n between 1 and 3999 ca" +
                    "n be represented as a Roman numeral made up of the following one- and two-letter" +
                    " \r\n combinations:\r\n\r\n    M    1000            X   10\r\n    CM    900            I" +
                    "X   9\r\n    D     500            V    5\r\n    CD    400            IV   4\r\n    C  " +
                    "   100            I    1\r\n    XC     90\r\n    L      50\r\n    XL     40\r\nWrite a c" +
                    "lass to represent Roman numerals. The class should have two constructors. One co" +
                    "nstructs a Roman \r\nnumeral from a string such as \"XVII\" or \"MCMXCV\". It should t" +
                    "hrow a NumberFormatException if the string is \r\nnot a legal Roman numeral. The o" +
                    "ther constructor constructs a Roman numeral from an int. It should throw a \r\nNum" +
                    "berFormatException if the int is outside the range 1 to 3999.\r\n\r\nIn addition, th" +
                    "e class should have two instance methods. The method toString() returns the stri" +
                    "ng that \r\nrepresents the Roman numeral. The method toInt() returns the value of " +
                    "the Roman numeral as an int.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Roman to Arabic")]
        [NUnit.Framework.TestCaseAttribute("I", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("XVII", "17", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MCMLIII", "1953", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MMMCCCIII", "3303", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MCMXCV", "1995", new string[0])]
        [NUnit.Framework.TestCaseAttribute("XVII", "ERROR", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MCMXCV", "ERROR", new string[0])]
        public virtual void RomanToArabic(string romanNumerial, string arabicNumber, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Roman to Arabic", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 35
 testRunner.Given(string.Format("I have entered {0} as Romanum", romanNumerial));
#line 36
 testRunner.When("I press convert");
#line 37
 testRunner.Then(string.Format("the result should be {0} as Arabic", arabicNumber));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Arabic to Roman")]
        [NUnit.Framework.TestCaseAttribute("I", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("XVII", "17", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MCMLIII", "1953", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MMMCCCIII", "3303", new string[0])]
        [NUnit.Framework.TestCaseAttribute("MCMXCV", "1995", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ERROR", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ERROR", "4000", new string[0])]
        public virtual void ArabicToRoman(string romanNumerial, string arabicNumber, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Arabic to Roman", exampleTags);
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
testRunner.Given(string.Format("I have entered {0} as Arabic", arabicNumber));
#line 51
testRunner.When("I press convert");
#line 52
testRunner.Then(string.Format("the result should be {0} as Romanum", romanNumerial));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
